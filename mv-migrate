#!/bin/bash
#### Description: Realiza a importação do CVS para GIT, com as APIs "git cvsimport" e "cvs2git"
#### Written by: 
####   - Tiago Costa - tiago.costa@mv.com.br on 10-2015
####   - Julio Tobias - julio.tobias@mv.com.br on 10-2015

set -o errexit
set -o pipefail
#set -o nounset

echo "============================================="
echo "= Executando a importação do CVS para GIT   ="
echo "============================================="

#Checkagem se os 2 parâmetros obrigatórios estão definidos
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
  then
    echo "Selecione o projeto MVFOR para realizar a migração para GIT:"
    echo "ex:  mv-migrate <group_name> <project_name> <project_version> <skip_pattern>"
    echo ""
    exit 1
fi

#Definindo variáveis
endpoint_url=$(echo $GITLAB_ENDPOINT | cut -d'/' -f3) #Ex: https://git.mv.com.br -> git.mv.com.br
group_name=$1
project_name=$(echo $2 | cut -d'/' -f 1)
project_version=$3
project_remote=git@${endpoint_url}:$group_name/${project_name}.git
GITCVS_HOME="$( dirname "${BASH_SOURCE[0]}" )"
OPTIONS="Cvs2Git CvsImport"

#Checkagem se o grupo de trabalho é soulmv para definição do valor padrão para
#o 3 parâmetro <skip_pattern>.
if [ -z "$4" ] || [[ "$group_name" == soulmv-* ]]; 
then
    ignored_files="cli_.*/|bin/"
else
    ignored_files="$4"
fi

echo "###################################"
echo "### Selecione o método de importação"

select opt in $OPTIONS; do
        if [ "$opt" = "Cvs2Git" ]; then
                $GITCVS_HOME/cvs2git-import $group_name $project_name
        elif [ "$opt" = "CvsImport" ]; then
                $GITCVS_HOME/git-cvsimport $group_name $project_name
        else
            echo 
        fi
done

echo "###################################"
echo "### Exportando para o repo remoto"

#RN4 - Confirma se o usuário deseja empurrar a importação para o repositório remoto.
read -r -p "Deseja enviar alterações do CVS para o repositório remoto do GIT? [y/N] " response
case $response in
    [yY][eE][sS]|[yY]) 
        if [ -z "$(git remote)" ]; then
           echo "Incluindo configuração do repositório remoto"
           git remote add origin $project_remote
        fi

#RN5 - Caso o repositório remoto não exista será criado pelo script ``create-projects``
        if ! git ls-remote origin ; then
           $GITCVS_HOME/create-projects $GITLAB_ENDPOINT $GITLAB_TOKEN $group_name/$project_name
        fi
#RN6 - Empurra as branches e tags do projeto, caso o projeto seja identificado 
#como pertencente do group SoulMV (ERP), as branches remotas seguirão o padrão:
	if [[  "$group_name" == soulmv-* ]]; 
          then
            if [ -n "$(git tag -l 'V1-0')" ]; then
               git tag -d 'V1-0'
            fi
            git checkout V1-0
            git tag -a v$project_version -m "Versão $project_version - Migração do CVS" \
		    || echo "Tag v$project_version já existe no repositório"

	    if ! git branch | grep develop; then 
	    	git checkout -b develop; 
	    fi;

	    git push origin V1-0:master develop v$project_version
            git push origin origin
	    $GITCVS_HOME/protect-branches $GITLAB_ENDPOINT $GITLAB_TOKEN $group_name/$project_name develop master
          else
            git push --all
            git push --tags
            $GITCVS_HOME/protect-branches $GITLAB_ENDPOINT $GITLAB_TOKEN $group_name/$project_name master
        fi
        ;;
esac
