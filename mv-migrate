#!/bin/bash
#### Description: Realiza a importação do CVS para GIT, com as APIs "git cvsimport" e "cvs2git"
#### Written by: 
####   - Tiago Costa - tiago.costa@mv.com.br on 10-2015
####   - Julio Tobias - julio.tobias@mv.com.br on 10-2015

set -o errexit
set -o pipefail
#set -o nounset

echo "============================================="
echo "= Executando a importação do CVS para GIT   ="
echo "============================================="

#Checkagem se os 2 parâmetros obrigatórios estão definidos
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
  then
    echo "Selecione o projeto MVFOR para realizar a migração para GIT:"
    echo "ex:  mv-migrate <group_name> <project_name> <project_version> <skip_pattern>"
    echo ""
    exit 1
fi

#Definindo variáveis
endpoint_url=$(echo $GITLAB_ENDPOINT | cut -d'/' -f3) #Ex: https://git.mv.com.br -> git.mv.com.br
group_name=$1
project_name=$(echo $2 | cut -d'/' -f 1)
project_version=$3
project_inited=${project_name}
project_remote=git@${endpoint_url}:$group_name/${project_name}.git

#Checkagem se o grupo de trabalho é soulmv para definição do valor padrão para
#o 3 parâmetro <skip_pattern>.
if [ -z "$4" ] || [[ "$group_name" == soulmv-* ]]; 
then
    ignored_files="cli_.*/|bin/"
else
    ignored_files="$4"
fi

#RN1 - inicia o projeto do CVS, caso ainda não esteja iniciado.
if [ ! -d "$project_name" ]; then
  cvs update -RCAd $project_name
fi

#RN2 - Verifica se já existe uma importação anterior no repositório local.
#RN2 - Caso haja, pergunta se o usuário deseja ignorar e realizar o download novamente.
echo "###################################"
echo "### Verificando repositório local"

if [ -d "${project_name}/.git" ] || git ls-remote -h $project_remote; then
  read -r -p "Projeto já contém um repositório GIT local, deseja ignora-lo e clonar-lo novamente? [y/N] " response
  case $response in
    [yY][eE][sS]|[yY])
       project_inited=""
  esac
fi

#RN2.1 - Clone no repositório existente de uma importação anterior.
if [ -z "$project_inited" ]; then

	echo "###################################"
	echo "### Verificando repositório remoto"
	echo "### GitLab: ${project_remote}"

	if git ls-remote -h $project_remote; then
		project_inited=${project_name}-temp-git
		if [ -d $project_inited ]; then
			rm -rf $project_inited
		fi
		git clone $project_remote ${project_inited}
	fi

	if [ -d "$project_inited" ]; then
		echo "Copiando o repositório GIT: $project_name"
		rm -rf ${project_name}/.git
		mv ${project_inited}/.git ${project_name}/
	fi
	
	rm -rf $project_inited
	cd $project_name

        echo "###################################"
	echo "### Iniciando branches remotas"

#RN2.1 - Download de todas as branches remotas.
  if [ -d ".git" ]; then
    for remote in `git branch -r`
       do
         remotename=$(echo $remote | cut -d'/' -f 2,3,4,5,6) && echo "DEBUG: remote={${remote}} | remotename={${remotename}}"
         if [ "$remotename" != "->" ] && [ "$remotename" != "HEAD" ]; then 
           if [ -n "$(git branch | grep $remotename)"  ]
              then
                echo "Branch $remotename já existe no repositório local"
              else
                git branch $remotename --track $remote || echo "ERRO: ao recuperar branch $remotename"
           fi
         fi
    done

    git fetch --all
    git pull --all

    echo "###################################"
    echo "### Verificando branch origin"

    if [ -z "$(git branch | grep origin)" ]
       then
       git checkout -b origin
    fi

    git checkout -f master
  fi

else
  cd $project_name
#  git checkout -f master
fi

#RN3 - Importação do repositório CVS para GIT, com os parâmetros ``-a`` (todos os commits) e ``-S <skip_pattern>``.
git cvsimport -a -i -S $ignored_files

#RN4 - Confirma se o usuário deseja empurrar a importação para o repositório remoto.
read -r -p "Deseja enviar alterações do CVS para o repositório remoto do GIT? [y/N] " response
case $response in
    [yY][eE][sS]|[yY]) 
        if [ -z "$(git remote)" ]; then
           echo "Incluindo configuração do repositório remoto"
           git remote add origin $project_remote
        fi

#RN5 - Caso o repositório remoto não exista será criado pelo script ``create-projects``
        if ! git ls-remote origin ; then
           $GITCVS_HOME/create-projects $GITLAB_ENDPOINT $GITLAB_TOKEN $group_name/$project_name
        fi
#RN6 - Empurra as branches e tags do projeto, caso o projeto seja identificado 
#como pertencente do group SoulMV (ERP), as branches remotas seguirão o padrão:
	if [[  "$group_name" == soulmv-* ]]; 
          then
            if [ -n "$(git tag -l 'V1-0')" ]; then
               git tag -d 'V1-0'
            fi
            git checkout V1-0
            git tag -a v$project_version -m "Versão $project_version - Migração do CVS" \
		    || echo "Tag v$project_version já existe no repositório"

	    if ! git branch | grep develop; then 
	    	git checkout -b develop; 
	    fi;

	    git push origin V1-0:master develop v$project_version
            git push origin origin
	    $GITCVS_HOME/protect-branches $GITLAB_ENDPOINT $GITLAB_TOKEN $group_name/$project_name develop master
          else
            git push --all
            git push --tags
            $GITCVS_HOME/protect-branches $GITLAB_ENDPOINT $GITLAB_TOKEN $group_name/$project_name master
        fi
        ;;
esac
