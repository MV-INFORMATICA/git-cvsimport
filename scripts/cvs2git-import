#!/bin/bash
#### Description: Realiza a importação do CVS para GIT através da API "cvs2git"
#### Written by: 
####   - Tiago Costa - tiago.costa@mv.com.br on 10-2015
####   - Julio Tobias - julio.tobias@mv.com.br on 10-2015

#Carregando funções utilitárias
GITCVS_HOME="$( dirname "${BASH_SOURCE[0]}" )"
source $GITCVS_HOME/cm_tool
process_options $@
shift $((OPTIND-1))

echo "============================================="
echo "= Executando a importação  - Cvs2Git        ="
echo "============================================="

#Checkagem se os 2 parâmetros obrigatórios estão definidos
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]
  then
    echo "Por favor informe a opções de acordo com os parâmetros abaixo:"
    echo "ex:  cvs2git-import <cvs_host> <cvs_root> <cvs_module> <project_name> <skip_pattern>"
    echo ""
    exit 1
fi

if [ -z "$CVS_USER" ]
  then
    echo "Por favor defina a variável de ambiente CVS_USER, conforme o exemplo baixo:"
    echo "ex:  export CVS_USER=<nome.sobrenome>"
    exit 1
fi


cvs_host=$1
cvs_root=$2
cvs_module=$3
project_name=$4
skip_pattern=$5

base_path=${PWD}
cvs_local_repo=$base_path/cvs-repo/${project_name}
cvs2svn_tmp=$base_path/cvs2svn-${project_name}-tm
project_path=$base_path/$project_name


## RN-01: Copia o repositório remote para a pasta local CVS-REPO.
if ! [ -d "cvs-repo" ]; then
	mkdir -p $base_path/cvs-repo/CVSROOT
	cvs -d $base_path/cvs-repo init
fi

if [ -d "$cvs_local_repo" ]; then
	rm -rf $cvs_local_repo
fi

mkdir -p $cvs_local_repo

case "$OPT_T" in
	PEP|pep)
		echo "##########################################"
		echo "### Organizando submodulos do projeto PEP"

		scp -1 -rp ${CVS_USER}@${cvs_host}:${cvs_root}${cvs_module}/${project_name}* $base_path/cvs-repo/
#		if [ -d $base_path/cvs-repo ]; then
#			rm -rf $base_path/cvs-repo
#			cp -R $base_path/cvs-repo-bkp/ $base_path/cvs-repo
#		fi

		cd $base_path/cvs-repo/
		echo "##### Find Command: (find . -maxdepth 1 -type d | grep -Pzo \"${project_name}\.\w*?\n\" | sort | uniq)"
		modules=$(find . -maxdepth 1 -type d | grep -Pzo "${project_name}\.\w*?\n" | sort | uniq)
		
		printf '%s\n' $modules
		sleep 1

		for m in $modules
		do
			echo "#### Module Name: ${m}"
			if [ "$m" == "pep.parent" ]; then
				mv $m/* $cvs_local_repo
			elif [ -d $m ]; then
				echo "#"
				mv $m $cvs_local_repo/$m
			else
				mkdir $cvs_local_repo/$m
			fi

			if [ "$m" != "pep.parent" ]; then
				echo "####### Find Sub Command: (find . -maxdepth 1 -type d | sort | grep -Pzo \"${m}.*\" | uniq)"
				echo "####### ${PWD}"

				if [ "${m}" == "pep.lista_paciente" ]; then
					m_query="pep.\w*_paciente"
				else
					m_query=$m
				fi

				list=$(find . -maxdepth 1 -type d | grep -Pzo "${m_query}.*" | sort | uniq) || list=
				echo "### SubModules"
			       	printf '%s\n' $list
				for i in $list
				do
					echo $i
					if [ "$i" != "$m" ]; then
						mv $i $cvs_local_repo/$m/$i
					fi
				done
				echo "#############"
			fi
		done
		;;
	*)
		scp -1 -rp ${CVS_USER}@${cvs_host}:${cvs_root}${cvs_module}/$project_name/* $cvs_local_repo
		;;
esac	


## RN-01.1: Removendo arquivos ignorados
if [ -n "$skip_pattern" ]; then
	echo "###################################"
	echo "### Exportando para o repo remoto"
	echo "### Pattern: \"(?:${skip_pattern})\""
	
	cd $cvs_local_repo
	ignore_list=$(find `pwd` | grep -P "(?:${skip_pattern})") || ignore_list=""
	for files in "${ignore_list}"; do
		rm -rf $files
	done
	cd $base_path

	echo "###################################"
fi



# RN-02: Gera os dumps de importação do CVS para SVN.
if [ -d "${cvs2svn_tmp}" ]; then
	rm -rf ${cvs2svn_tmp}
fi

mkdir ${cvs2svn_tmp}

cvs2git --blobfile=${cvs2svn_tmp}/git-blob.dat --dumpfile=${cvs2svn_tmp}/git-dump.dat  --username=cvs2git --encoding=UTF8 --fallback-encoding=cp1252  $cvs_local_repo

## RN-03: Cria o repositório local GIT.
if [ -d "$project_path" ]; then
	rm -rf $project_path
fi
mkdir $project_path
cd $project_path
git init

## RN-04: Importa os dumps do SVN para o repositório local GIT.
cat ${cvs2svn_tmp}/git-blob.dat ${cvs2svn_tmp}/git-dump.dat | git fast-import

## RN-05: Conclusão da importação, mudança para branch master.
git checkout

if [[ "$OPT_T" == "PEP" || "$OPT_T" == "pep" ]]; then
	sed -i "/<relativePath/d" */pom.xml */**/pom.xml
	sed -i "s/<module>..\//<module>/g" */pom.xml */**/pom.xml
	git add .
	git commit -m "Refactory no maven para nova organização no GIT" 
fi


rm -rf ${cvs2svn_tmp}
